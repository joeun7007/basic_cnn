# -*- coding: utf-8 -*-
"""vgg16_cifar10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9SeZQ7LsJXwq8VO5vPhzh0M0zNpenW5
"""

import tensorflow as tf
import numpy as np
from tensorflow import keras

# Hyperparameter
learning_rate = 0.01
N_EPOCHS = 20
N_BATCH = 100
N_CLASS = 10
IMG_SIZE = 224

## Cifar10 Dataset #########################################################
cifar = keras.datasets.cifar10
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

## CIfar10 dataset load & preprocessing
(train_images, train_labels), (test_images, test_labels) = cifar.load_data() 

N_TRAIN = train_images.shape[0]
N_TEST = test_images.shape[0]

# pixel값을 0~1사이 범위로 조정
train_images = train_images.astype(np.float32) / 255.
test_images = test_images.astype(np.float32) / 255.

train_labels = keras.utils.to_categorical(train_labels, 10)
test_labels = keras.utils.to_categorical(test_labels, 10)

## data preprocessing - resize image
def img_resize(images, labels):
  return tf.image.resize(images, (IMG_SIZE, IMG_SIZE)), labels

## dataset 구성    
train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(
                buffer_size=50000).batch(N_BATCH).map(img_resize).repeat()
test_dataset = tf.data.Dataset.from_tensor_slices((test_images, test_labels)).batch(N_BATCH).map(img_resize)

## VGG16
def VGG16():
    model = tf.keras.Sequential()
    # 1
    model.add(tf.keras.layers.Conv2D(filters=64,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu',
                                     input_shape=(IMG_SIZE, IMG_SIZE, 3)))
    model.add(tf.keras.layers.Conv2D(filters=64,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                        strides=2,
                                        padding='same'))
    
    # 2
    model.add(tf.keras.layers.Conv2D(filters=128,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=128,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                        strides=2,
                                        padding='same'))
    
    # 3
    model.add(tf.keras.layers.Conv2D(filters=256,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=256,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=256,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                        strides=2,
                                        padding='same'))
    
    #4
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                        strides=2,
                                        padding='same'))
    
    #5
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.Conv2D(filters=512,
                                     kernel_size=(3, 3),
                                     strides=1,
                                     padding='same',
                                     activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2),
                                        strides=2,
                                        padding='same'))
    
    model.add(tf.keras.layers.Flatten())
    model.add(tf.keras.layers.Dense(4096,
                                    activation='relu'))
    model.add(tf.keras.layers.Dense(4096,
                                    activation='relu'))
    model.add(tf.keras.layers.Dense(units=N_CLASS,
                                    activation='relu'))
    
    return model

## Create model, compile & summary
model = VGG16()
model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate, momentum=0.9),
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model.summary()

## Parameters for training
steps_per_epoch = N_TRAIN//N_BATCH
validation_steps = N_TEST//N_BATCH
print(steps_per_epoch, validation_steps)

# Train & Validation
history = model.fit(train_dataset, epochs=N_EPOCHS, steps_per_epoch=steps_per_epoch,
            validation_data=test_dataset, validation_steps=validation_steps)

